var express = require('express')
var passport = require('passport');
var util = require('util');
var HumanApiStrategy = require('passport-humanapi').Strategy;

var lastDataRetrievedTs ;

// Database
//
var databaseUrl = "ethWearable"; // "username:password@example.com/mydb"
var collections = ["users", "runStats"]
var mongoose = require('mongoose');

//var db = mongoose.connect('mongodb://127:0.0.1:27017/ethWearable', collections );

//attach listner to connected event
/*mongoose.connection.once('connected', function() {
    console.log("Connected to database")
});*/

var db = require("mongojs").connect(databaseUrl, collections);

db.on('error', console.error.bind(console, 'connection error:'));

// Configure the application with you generated App ID and App Secret
var HUMANAPI_APP_ID     =  "f8a1efa87564fc103ff038b80be484a8d8ee2f3c";
var HUMANAPI_APP_SECRET =  "e1f76eac74f2349c4c375d9b917a88a6866fd9c5";


// Passport session setup.
//   To support persistent login sessions, Passport needs to be able to
//   serialize users into and deserialize users out of the session.  Typically,
//   this will be as simple as storing the user ID when serializing, and finding
//   the user by ID when deserializing.  However, since this example does not
//   have a database of user records, the complete HumanAPI profile is serialized
//   and deserialized.
passport.serializeUser(function(user, done) {
  done(null, user);
});

passport.deserializeUser(function(obj, done) {
  done(null, obj);
});


// Use the HumanApiStrategy within Passport.
//   Strategies in Passport require a `verify` function, which accept
//   credentials (in this case, an accessToken, refreshToken, and HumanAPI
//   profile), and invoke a callback with a user object.
passport.use(new HumanApiStrategy({
    clientID:     HUMANAPI_APP_ID,
    clientSecret: HUMANAPI_APP_SECRET,
    callbackURL:  "http://localhost:3000/auth/humanapi/callback"
  },
  function(accessToken, refreshToken, profile, done) {
    // asynchronous verification, for effect...
    process.nextTick(function () {
      writeToDB(accessToken, refreshToken, profile)
      //console.log("HUMAN API PROFILE DATA")
      //console.log("Access Token:\t" + accessToken)
      //console.log("Refresh Token:\t" +  refreshToken)
      //console.log(profile)
      // To keep the example simple, the user's HumanAPI profile is returned to
      // represent the logged-in user.  In a typical application, you would want
      // to associate the HumanAPI account with a user record in your database,
      // and return that user instead.
      return done(null, profile);
    });
  }
));


var app = express();

// configure Express
app.configure(function() {
  app.set('port', process.env.PORT || 3000);
  app.set('views', __dirname + '/views');
  app.set('view engine', 'ejs');
  // app.use(express.logger()); //dev environment logger
  app.use(express.cookieParser());
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.session({ secret: 'jodelahuhu' }));
  // Initialize Passport!  Also use passport.session() middleware, to support
  // persistent login sessions (recommended).
  app.use(passport.initialize());
  app.use(passport.session());
  app.use(app.router);
  app.use(express.static(__dirname + '/public'));
});

app.get('/', function(req, res){
  console.log("[HUMANAPI-EXAMPLE-APP] Request User" + req.user);
  res.render('index', { user: req.user });
});

// Calling close works well when the authentication flow is opened up in a popup or modal window
app.get('/close', function(req, res){
  res.render('close');
});


// GET /auth/humanapi
//   Use passport.authenticate() as route middleware to authenticate the
//   request.  The first step in HumanAPI authentication will involve
//   redirecting the user to humanapi.com.  After authorization, HumanAPI will
//   redirect the user back to this application at /auth/humanapi/callback
app.get('/auth/humanapi',
  passport.authenticate('humanapi'),
  function(req, res){
    // The request will be redirected to HumanAPI for authentication, so this
    // function will not be called.
  });

// GET /auth/humanapi/callback
//   Use passport.authenticate() as route middleware to authenticate the
//   request.  If authentication fails, the user will be redirected back to the
//   login page.  Otherwise, the primary route function function will be called,
//   which, in this example, will redirect the user to the home page.
app.get('/auth/humanapi/callback',
  passport.authenticate('humanapi', { failureRedirect: '/close' }),
  function(req, res) {
    // Call /close if the auth process is opened in a popup
    res.redirect('/close'); 
    // otherwise call the home page etc.
    // res.redirect('/');
  });

app.get('/logout', function(req, res){
  req.logout();
  res.redirect('/');
});

app.listen(app.get('port'), function(){
  console.log("[HUMANAPI-EXAMPLE-APP] Express server listening on port " + app.get('port'));
});

function ensureAuthenticated(req, res, next) {
  console.log(req.user)
  if (req.isAuthenticated()) { return next(); }
  res.redirect('/login')
}

function writeToDB(accessToken, refreshToken, profile) {
   var userInfo = { "accessToken" : accessToken, "profile" : profile }
   db.users.save( userInfo )
   console.log("WRITE TO DB...HUMAN API PROFILE DATA")
   console.log("Access Token:\t" + accessToken)
   console.log("Refresh Token:\t" +  refreshToken)
   console.log(profile)
}

var writeLastDataAccessTimeCB = function writeRunStatsToDB() {
   var lastRunStats = db.runStats.findOne() ;
   cosole.log ( 'Setting this time into the database') ;
   var curTime = moment.utc().format('YYYYMMDDThhmmss');
   lastDataRetrievedTs = curTime ;
   db.runStats.update( { $set: { "lastDataRetrievedTime" : lastDataRetrievedTs } } );
}

var callHealth = require('./callHealth.js');
//callHealth.getHealthData();

var myCb = function ( lastDataAccessTime ) {
   console.log('Last fetch time stamp' + lastDataAccessTime );
   //Get Health API data
   //callHealth.getHealthData(lastDataAccessTime, writeLastDataAccessTimeCB);
};

getLastDataAccessTimeFromDatabase(myCb) ;

//callHealth.getHealthData();
//Scheduler
/*
var schedule = require('node-schedule');
var rule = new schedule.RecurrenceRule();
var callHealth = require('./callHealth.js');

rule.minute = new schedule.Range(0, 59, 1);

schedule.scheduleJob(rule, function() {
    console.log(rule);
    console.log('Today is recognized by Rebecca Black!-----------');
    callHealth.getHealthData();
}); */

/**
 * Get last Data Access Time 
 */
function getLastDataAccessTimeFromDatabase( myCb ) {

   //If lastDataRetrievedTs is null get data from the last 10 days..
   if ( lastDataRetrievedTs  == null ) {

	var count =  db.runStats.count() ;

	console.log( "Count ..." + count ) ;
	var moment = require('moment');

	if ( count == 0 ) 
	{
	    console.log( "Starting for the very first time..." ) ;
	    var curTime = moment.utc().format('YYYYMMDDThhmmss');
	    console.log( "Returning time from Database" ) ;
	    var runStats = { "lastDataRetrievedTime" : curTime }
            //db.runStats.save( runStats )
	    myCb(curTime);
	} else {
	    // To Change .. Get Last Updated Ts from the database
            var lastRunStats = db.runStats.findOne() ;
	    console.log ( 'This is what I got from db' + lastRunStats.last ) ;
	    var curTime = moment.utc().format('YYYYMMDDThhmmss');
	    var runStats = { "lastDataRetrievedTime" : curTime }
            //db.runStats.save( runStats )
	    lastDataRetrievedTs = curTime ;
	    myCb(curTime);
	}
   }
   else {
	console.log( "Returning Last data retrieved time" ) ;
        myCb(lastDataRetrievedTs);
   }
}
